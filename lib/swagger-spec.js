// Generated by CoffeeScript 1.3.3
(function() {

  window.api_key = 'special-key';

  describe('SwaggerApi', function() {
    describe('constructor', function() {
      describe('defaults', function() {
        beforeEach(function() {
          window.wordnik = new SwaggerApi({
            discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json'
          });
          return waitsFor(function() {
            return wordnik;
          });
        });
        it("sets the default discoveryUrl to wordnik swagger sandbox", function() {
          return runs(function() {
            return expect(wordnik.discoveryUrl).toBe("http://petstore.swagger.wordnik.com/api/api-docs.json");
          });
        });
        it("disables the debugger by default", function() {
          return runs(function() {
            return expect(wordnik.debug).toBe(false);
          });
        });
        return it("builds right away if a 'success' callback was passed to the initializer", function() {
          window.successFunctionCalled = false;
          window.sampleApi = new SwaggerApi({
            success: function() {
              return window.successFunctionCalled = true;
            }
          });
          waitsFor(function() {
            return sampleApi.ready != null;
          });
          return runs(function() {
            return expect(window.successFunctionCalled).toBe(true);
          });
        });
      });
      return describe('customization', function() {
        beforeEach(function() {
          window.unicornApi = new SwaggerApi({
            discoveryUrl: "http://unicorns.com",
            debug: true,
            apiKey: 'stardust'
          });
          return waitsFor(function() {
            return unicornApi;
          });
        });
        it("allows discoveryUrl to be set", function() {
          return runs(function() {
            return expect(unicornApi.discoveryUrl).toBe("http://unicorns.com?api_key=stardust");
          });
        });
        it("allows debugging to be enabled", function() {
          return runs(function() {
            return expect(unicornApi.debug).toBe(true);
          });
        });
        return it("converts apiKey to api_key", function() {
          return runs(function() {
            return expect(unicornApi.api_key).toBe('stardust');
          });
        });
      });
    });
    describe('build', function() {
      beforeEach(function() {
        window.wordnik = new SwaggerApi({
          discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json'
        });
        wordnik.build();
        return waitsFor(function() {
          return wordnik.ready != null;
        });
      });
      it("sets basePath", function() {
        return runs(function() {
          return expect(wordnik.basePath).toBe("http://petstore.swagger.wordnik.com/api");
        });
      });
      it("creates a container object for its resources, with resource names as keys", function() {
        return runs(function() {
          expect(wordnik.apis).toBeDefined();
          expect(wordnik.apis).toBeDefined();
          return expect(wordnik.apis.pet).toBeDefined();
        });
      });
      return it("creates shorthand references to its resources", function() {
        return runs(function() {
          return expect(wordnik.pet).toBeDefined();
        });
      });
    });
    return describe('resourceLevelDiscovery', function() {
      beforeEach(function() {
        window.wordnik = new SwaggerApi({
          discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json/pet'
        });
        wordnik.build();
        return waitsFor(function() {
          return wordnik.ready != null;
        });
      });
      it("creates a container object for its resource, with resource name as keys", function() {
        return runs(function() {
          expect(wordnik.apis).toBeDefined();
          expect(wordnik.apis).toBeDefined();
          return expect(wordnik.apis.pet).toBeDefined();
        });
      });
      return it("creates shorthand references to its resource", function() {
        return runs(function() {
          return expect(wordnik.pet).toBeDefined();
        });
      });
    });
  });

  describe('SwaggerResource', function() {
    beforeEach(function() {
      window.wordnik = new SwaggerApi({
        discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json'
      });
      wordnik.build();
      return waitsFor(function() {
        return wordnik.ready != null;
      });
    });
    it("creates a url property", function() {
      return runs(function() {
        var resource;
        resource = wordnik.apis.pet;
        return expect(resource.url).toMatch(/\.json/);
      });
    });
    it("has a name property which is inferred from its path", function() {
      return runs(function() {
        var resource;
        resource = wordnik.pet;
        return expect(resource.name).toEqual('pet');
      });
    });
    it("creates a container object for its operations, with operation nicknames as keys", function() {
      return runs(function() {
        var resource;
        resource = wordnik.pet;
        expect(resource.operations).toBeDefined();
        expect(resource.operationsArray).toBeDefined();
        return expect(resource.operations.getPetById).toBeDefined();
      });
    });
    return it("creates named functions that map to its operations", function() {
      return runs(function() {
        return expect(wordnik.pet.getPetById).toBeDefined();
      });
    });
  });

  describe('SwaggerOperation', function() {
    beforeEach(function() {
      window.wordnik = new SwaggerApi({
        discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json'
      });
      wordnik.api_key = window.api_key;
      wordnik.build();
      return waitsFor(function() {
        return wordnik.ready != null;
      });
    });
    describe("urlify", function() {
      beforeEach(function() {
        window.operation = wordnik.apis.pet.operations.getPetById;
        operation.path = "/my.{format}/{foo}/kaboo";
        operation.parameters = [
          {
            paramType: 'path',
            name: 'foo'
          }
        ];
        return window.args = {
          foo: 'pee'
        };
      });
      it("verifies notes", function() {
        return runs(function() {
          return expect(operation.notes).toMatch(/^Returns a pet/) != null;
        });
      });
      it("automatically converts {format} to json", function() {
        return runs(function() {
          return expect(operation.urlify(args)).toMatch(/my\.json/);
        });
      });
      it("injects path arguments into the path", function() {
        return runs(function() {
          return expect(operation.urlify(args)).toMatch(/\/pee\/kaboo/);
        });
      });
      return it("throws an exception if path has unmatched arguments", function() {
        return runs(function() {
          var args;
          args = {};
          return expect(function() {
            return operation.urlify(args);
          }).toThrow("foo is a required path param.");
        });
      });
    });
    describe("do", function() {
      beforeEach(function() {
        window.args = {
          tags: 'tag1',
          limit: 2
        };
        return window.response = null;
      });
      it("gets back a list of pets", function() {
        wordnik.pet.findPetsByTags(args, function(response) {
          return window.response = response;
        });
        waitsFor(function() {
          return typeof response !== "undefined" && response !== null;
        });
        return runs(function() {
          expect(response.length).toBeGreaterThan(0);
          expect(response[0].name).toBeDefined();
          expect(response[0].id).toBeDefined();
          return expect(response[0].tags).toBeDefined();
        });
      });
      it("pulls request headers out of the args object", function() {
        args.headers = {
          'head-cheese': 'certainly'
        };
        window.request = wordnik.pet.findPetsByTags(args, function(response) {
          return window.response = response;
        });
        waitsFor(function() {
          return typeof response !== "undefined" && response !== null;
        });
        return runs(function() {
          expect(request.headers).toBeDefined();
          return expect(request.headers['head-cheese']).toBeDefined();
        });
      });
      return it("pulls request body out of the args object", function() {
        args.body = {
          'name': 'haute couture',
          'pronunciation': 'hottie cooter-otty'
        };
        window.request = wordnik.pet.findPetsByTags(args, function(response) {
          return window.response = response;
        });
        waitsFor(function() {
          return typeof response !== "undefined" && response !== null;
        });
        return runs(function() {
          expect(request.body).toBeDefined();
          expect(request.body.name).toMatch(/haute/);
          return expect(request.body.pronunciation).toMatch(/cooter/);
        });
      });
    });
    return describe('constructor', function() {
      beforeEach(function() {
        var resource;
        resource = {
          name: 'hello hello',
          models: {}
        };
        window.construct = function(c0nstructor, args) {
          var F;
          F = function() {
            return c0nstructor.apply(this, args);
          };
          F.prototype = c0nstructor.prototype;
          return new F();
        };
        return window.defaultParams = ['nickname', '/path', 'GET', [], 'This is a summary', 'Some notes', '', [], resource, []];
      });
      it('must have a nickname set', function() {
        var noNicknameParams;
        expect(operation).toBeDefined();
        noNicknameParams = defaultParams;
        noNicknameParams[0] = void 0;
        return expect(function() {
          return construct(SwaggerOperation, noNicknameParams);
        }).toThrow();
      });
      return it('must not fail if supportedContentTypes is not set', function() {
        expect(operation).toBeDefined();
        return expect(operation.supportedContentTypes).toBeUndefined();
      });
    });
  });

  describe('SwaggerRequest', function() {
    beforeEach(function() {
      window.wordnik2 = new SwaggerApi({
        discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json'
      });
      wordnik2.build();
      return waitsFor(function() {
        return wordnik2.ready != null;
      });
    });
    describe("constructor", function() {
      beforeEach(function() {
        window.headers = {
          'api_key': 'magic',
          'mock': 'true'
        };
        window.body = null;
        window.callback = function() {
          return 'mock callback';
        };
        window.error = function() {
          return 'mock error';
        };
        window.operation = wordnik2.pet.operations.getPetById;
        return window.request = new SwaggerRequest("GET", "http://google.com", headers, body, callback, error, operation);
      });
      return it("sticks the API key into the headers, if present in the parent Api configuration", function() {
        window.args = {
          petId: '1'
        };
        return runs(function() {
          return expect(request.headers.api_key).toMatch(/magic/);
        });
      });
    });
    it("exposes an asCurl() method", function() {
      var curl;
      curl = request.asCurl();
      return expect(curl).toMatch(/--header \"api_key: magic\"/);
    });
    return it("supports an error callback", function() {
      var failure, success;
      window.error_message = null;
      success = function() {
        return window.error_message = "success";
      };
      failure = function() {
        return window.error_message = "error";
      };
      window.request = new SwaggerRequest("GET", "http://google.com/foo", {}, {}, success, failure, window.operation);
      waitsFor(function() {
        return typeof error_message !== "undefined" && error_message !== null;
      });
      return runs(function() {
        return expect(error_message).toBe("error");
      });
    });
  });

  describe('Crud Methods', function() {
    window.random = Math.floor(Math.random() * 1000000);
    beforeEach(function() {
      window.petstore = new SwaggerApi({
        discoveryUrl: 'http://petstore.swagger.wordnik.com/api/api-docs.json',
        api_key: 'special-key'
      });
      petstore.build();
      return waitsFor(function() {
        return petstore.ready != null;
      });
    });
    it("supports POST requests", function() {
      var args;
      args = {
        body: {
          id: "" + random,
          name: "pet-" + random,
          status: "available"
        }
      };
      petstore.pet.addPet(args, function(response) {
        return window.response = response;
      });
      waitsFor(function() {
        return typeof response !== "undefined" && response !== null;
      });
      return runs(function() {
        return expect(response).toBeDefined();
      });
    });
    return it("supports PUT requests", function() {
      var args;
      args = {
        body: {
          id: "" + random,
          name: "a nice pet-" + random,
          status: "available"
        }
      };
      petstore.pet.updatePet(args, function(response) {
        return window.response = response;
      });
      waitsFor(function() {
        return typeof response !== "undefined" && response !== null;
      });
      return runs(function() {
        return expect(response).toBeDefined();
      });
    });
  });

}).call(this);
